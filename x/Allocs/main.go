package main

type smallStruct struct {
	a, b int64
	c, d float64
}

func main() {
	smallAllocation()
}

//go:noinline
func smallAllocation() *smallStruct {
	return &smallStruct{}
}

// $ go tool compile "-m" main.go
// main.go:8:6: can inline main
// main.go:14:9: &smallStruct{} escapes to heap

// go tool compile -S main.go
// "".main STEXT size=54 args=0x0 locals=0x10 funcid=0x0
// 	0x0000 00000 (main.go:8)	TEXT	"".main(SB), ABIInternal, $16-0
// 	0x0000 00000 (main.go:8)	MOVQ	(TLS), CX
// 	0x0009 00009 (main.go:8)	CMPQ	SP, 16(CX)
// 	0x000d 00013 (main.go:8)	PCDATA	$0, $-2
// 	0x000d 00013 (main.go:8)	JLS	47
// 	0x000f 00015 (main.go:8)	PCDATA	$0, $-1
// 	0x000f 00015 (main.go:8)	SUBQ	$16, SP
// 	0x0013 00019 (main.go:8)	MOVQ	BP, 8(SP)
// 	0x0018 00024 (main.go:8)	LEAQ	8(SP), BP
// 	0x001d 00029 (main.go:8)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
// 	0x001d 00029 (main.go:8)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
// 	0x001d 00029 (main.go:9)	PCDATA	$1, $0
// 	0x001d 00029 (main.go:9)	NOP
// 	0x0020 00032 (main.go:9)	CALL	"".smallAllocation(SB)
// 	0x0025 00037 (main.go:10)	MOVQ	8(SP), BP
// 	0x002a 00042 (main.go:10)	ADDQ	$16, SP
// 	0x002e 00046 (main.go:10)	RET
// 	0x002f 00047 (main.go:10)	NOP
// 	0x002f 00047 (main.go:8)	PCDATA	$1, $-1
// 	0x002f 00047 (main.go:8)	PCDATA	$0, $-2
// 	0x002f 00047 (main.go:8)	CALL	runtime.morestack_noctxt(SB)
// 	0x0034 00052 (main.go:8)	PCDATA	$0, $-1
// 	0x0034 00052 (main.go:8)	JMP	0
// 	0x0000 64 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 20 48  dH..%....H;a.v H
// 	0x0010 83 ec 10 48 89 6c 24 08 48 8d 6c 24 08 0f 1f 00  ...H.l$.H.l$....
// 	0x0020 e8 00 00 00 00 48 8b 6c 24 08 48 83 c4 10 c3 e8  .....H.l$.H.....
// 	0x0030 00 00 00 00 eb ca                                ......
// 	rel 5+4 t=17 TLS+0
// 	rel 33+4 t=8 "".smallAllocation+0
// 	rel 48+4 t=8 runtime.morestack_noctxt+0
// "".smallAllocation STEXT size=72 args=0x8 locals=0x18 funcid=0x0
// 	0x0000 00000 (main.go:13)	TEXT	"".smallAllocation(SB), ABIInternal, $24-8
// 	0x0000 00000 (main.go:13)	MOVQ	(TLS), CX
// 	0x0009 00009 (main.go:13)	CMPQ	SP, 16(CX)
// 	0x000d 00013 (main.go:13)	PCDATA	$0, $-2
// 	0x000d 00013 (main.go:13)	JLS	65
// 	0x000f 00015 (main.go:13)	PCDATA	$0, $-1
// 	0x000f 00015 (main.go:13)	SUBQ	$24, SP
// 	0x0013 00019 (main.go:13)	MOVQ	BP, 16(SP)
// 	0x0018 00024 (main.go:13)	LEAQ	16(SP), BP
// 	0x001d 00029 (main.go:13)	FUNCDATA	$0, gclocals·2a5305abe05176240e61b8620e19a815(SB)
// 	0x001d 00029 (main.go:13)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
// 	0x001d 00029 (main.go:14)	LEAQ	type."".smallStruct(SB), AX
// 	0x0024 00036 (main.go:14)	MOVQ	AX, (SP)
// 	0x0028 00040 (main.go:14)	PCDATA	$1, $0
// 	0x0028 00040 (main.go:14)	CALL	runtime.newobject(SB)
// 	0x002d 00045 (main.go:14)	MOVQ	8(SP), AX
// 	0x0032 00050 (main.go:14)	MOVQ	AX, "".~r0+32(SP)
// 	0x0037 00055 (main.go:14)	MOVQ	16(SP), BP
// 	0x003c 00060 (main.go:14)	ADDQ	$24, SP
// 	0x0040 00064 (main.go:14)	RET
// 	0x0041 00065 (main.go:14)	NOP
// 	0x0041 00065 (main.go:13)	PCDATA	$1, $-1
// 	0x0041 00065 (main.go:13)	PCDATA	$0, $-2
// 	0x0041 00065 (main.go:13)	CALL	runtime.morestack_noctxt(SB)
// 	0x0046 00070 (main.go:13)	PCDATA	$0, $-1
// 	0x0046 00070 (main.go:13)	JMP	0
// 	0x0000 64 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 32 48  dH..%....H;a.v2H
// 	0x0010 83 ec 18 48 89 6c 24 10 48 8d 6c 24 10 48 8d 05  ...H.l$.H.l$.H..
// 	0x0020 00 00 00 00 48 89 04 24 e8 00 00 00 00 48 8b 44  ....H..$.....H.D
// 	0x0030 24 08 48 89 44 24 20 48 8b 6c 24 10 48 83 c4 18  $.H.D$ H.l$.H...
// 	0x0040 c3 e8 00 00 00 00 eb b8                          ........
// 	rel 5+4 t=17 TLS+0
// 	rel 32+4 t=16 type."".smallStruct+0
// 	rel 41+4 t=8 runtime.newobject+0
// 	rel 66+4 t=8 runtime.morestack_noctxt+0
// type..eq."".smallStruct STEXT dupok nosplit size=79 args=0x18 locals=0x0 funcid=0x0
// 	0x0000 00000 (<autogenerated>:1)	TEXT	type..eq."".smallStruct(SB), DUPOK|NOSPLIT|ABIInternal, $0-24
// 	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$0, gclocals·dc9b0298814590ca3ffc3a889546fc8b(SB)
// 	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$1, gclocals·69c1753bd5f81501d95132d08af04464(SB)
// 	0x0000 00000 (<autogenerated>:1)	MOVQ	"".q+16(SP), AX
// 	0x0005 00005 (<autogenerated>:1)	MOVQ	(AX), CX
// 	0x0008 00008 (<autogenerated>:1)	MOVQ	"".p+8(SP), DX
// 	0x000d 00013 (<autogenerated>:1)	CMPQ	(DX), CX
// 	0x0010 00016 (<autogenerated>:1)	JNE	46
// 	0x0012 00018 (<autogenerated>:1)	MOVQ	8(AX), CX
// 	0x0016 00022 (<autogenerated>:1)	CMPQ	8(DX), CX
// 	0x001a 00026 (<autogenerated>:1)	JNE	46
// 	0x001c 00028 (<autogenerated>:1)	MOVSD	16(DX), X0
// 	0x0021 00033 (<autogenerated>:1)	MOVSD	16(AX), X1
// 	0x0026 00038 (<autogenerated>:1)	UCOMISD	X0, X1
// 	0x002a 00042 (<autogenerated>:1)	JNE	46
// 	0x002c 00044 (<autogenerated>:1)	JPC	52
// 	0x002e 00046 (<autogenerated>:1)	MOVB	$0, "".r+24(SP)
// 	0x0033 00051 (<autogenerated>:1)	RET
// 	0x0034 00052 (<autogenerated>:1)	MOVSD	24(DX), X0
// 	0x0039 00057 (<autogenerated>:1)	MOVSD	24(AX), X1
// 	0x003e 00062 (<autogenerated>:1)	UCOMISD	X0, X1
// 	0x0042 00066 (<autogenerated>:1)	SETEQ	CL
// 	0x0045 00069 (<autogenerated>:1)	SETPC	AL
// 	0x0048 00072 (<autogenerated>:1)	ANDL	AX, CX
// 	0x004a 00074 (<autogenerated>:1)	MOVB	CL, "".r+24(SP)
// 	0x004e 00078 (<autogenerated>:1)	RET
// 	0x0000 48 8b 44 24 10 48 8b 08 48 8b 54 24 08 48 39 0a  H.D$.H..H.T$.H9.
// 	0x0010 75 1c 48 8b 48 08 48 39 4a 08 75 12 f2 0f 10 42  u.H.H.H9J.u....B
// 	0x0020 10 f2 0f 10 48 10 66 0f 2e c8 75 02 7b 06 c6 44  ....H.f...u.{..D
// 	0x0030 24 18 00 c3 f2 0f 10 42 18 f2 0f 10 48 18 66 0f  $......B....H.f.
// 	0x0040 2e c8 0f 94 c1 0f 9b c0 21 c1 88 4c 24 18 c3     ........!..L$..
// go.cuinfo.packagename. SDWARFCUINFO dupok size=0
// 	0x0000 6d 61 69 6e                                      main
// ""..inittask SNOPTRDATA size=24
// 	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0010 00 00 00 00 00 00 00 00                          ........
// type..eqfunc."".smallStruct SRODATA dupok size=8
// 	0x0000 00 00 00 00 00 00 00 00                          ........
// 	rel 0+8 t=1 type..eq."".smallStruct+0
// runtime.memequal64·f SRODATA dupok size=8
// 	0x0000 00 00 00 00 00 00 00 00                          ........
// 	rel 0+8 t=1 runtime.memequal64+0
// runtime.gcbits.01 SRODATA dupok size=1
// 	0x0000 01                                               .
// type..namedata.*main.smallStruct- SRODATA dupok size=20
// 	0x0000 00 00 11 2a 6d 61 69 6e 2e 73 6d 61 6c 6c 53 74  ...*main.smallSt
// 	0x0010 72 75 63 74                                      ruct
// type.*"".smallStruct SRODATA size=56
// 	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
// 	0x0010 e6 5b a2 87 08 08 08 36 00 00 00 00 00 00 00 00  .[.....6........
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00                          ........
// 	rel 24+8 t=1 runtime.memequal64·f+0
// 	rel 32+8 t=1 runtime.gcbits.01+0
// 	rel 40+4 t=5 type..namedata.*main.smallStruct-+0
// 	rel 48+8 t=1 type."".smallStruct+0
// runtime.gcbits. SRODATA dupok size=0
// type..namedata.a- SRODATA dupok size=4
// 	0x0000 00 00 01 61                                      ...a
// type..namedata.b- SRODATA dupok size=4
// 	0x0000 00 00 01 62                                      ...b
// type..namedata.c- SRODATA dupok size=4
// 	0x0000 00 00 01 63                                      ...c
// type..namedata.d- SRODATA dupok size=4
// 	0x0000 00 00 01 64                                      ...d
// type."".smallStruct SRODATA size=192
// 	0x0000 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ...............
// 	0x0010 7d 23 bf eb 07 08 08 19 00 00 00 00 00 00 00 00  }#..............
// 	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0040 04 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  ................
// 	0x0050 00 00 00 00 00 00 00 00 70 00 00 00 00 00 00 00  ........p.......
// 	0x0060 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x0080 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
// 	0x0090 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
// 	0x00a0 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ...............
// 	0x00b0 00 00 00 00 00 00 00 00 30 00 00 00 00 00 00 00  ........0.......
// 	rel 24+8 t=1 type..eqfunc."".smallStruct+0
// 	rel 32+8 t=1 runtime.gcbits.+0
// 	rel 40+4 t=5 type..namedata.*main.smallStruct-+0
// 	rel 44+4 t=5 type.*"".smallStruct+0
// 	rel 48+8 t=1 type..importpath."".+0
// 	rel 56+8 t=1 type."".smallStruct+96
// 	rel 80+4 t=5 type..importpath."".+0
// 	rel 96+8 t=1 type..namedata.a-+0
// 	rel 104+8 t=1 type.int64+0
// 	rel 120+8 t=1 type..namedata.b-+0
// 	rel 128+8 t=1 type.int64+0
// 	rel 144+8 t=1 type..namedata.c-+0
// 	rel 152+8 t=1 type.float64+0
// 	rel 168+8 t=1 type..namedata.d-+0
// 	rel 176+8 t=1 type.float64+0
// gclocals·33cdeccccebe80329f1fdbee7f5874cb SRODATA dupok size=8
// 	0x0000 01 00 00 00 00 00 00 00                          ........
// gclocals·2a5305abe05176240e61b8620e19a815 SRODATA dupok size=9
// 	0x0000 01 00 00 00 01 00 00 00 00                       .........
// gclocals·dc9b0298814590ca3ffc3a889546fc8b SRODATA dupok size=10
// 	0x0000 02 00 00 00 02 00 00 00 03 00                    ..........
// gclocals·69c1753bd5f81501d95132d08af04464 SRODATA dupok size=8
// 	0x0000 02 00 00 00 00 00 00 00                          ........
//
